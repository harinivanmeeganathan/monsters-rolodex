{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","check","console","log","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,G,MAAO,SAAAC,GAAK,OACzB,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,mCAAML,EAAMI,QAAQE,KAApB,QACA,4BAAIN,EAAMI,QAAQG,aCHTC,G,MAAW,SAAAR,GAAK,OAC7B,qBAAKC,UAAU,YAAf,SACID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCFZM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EACrDG,SAAUF,MCiCCG,G,wDAjCb,aAAc,IAAD,8BACX,gBAEGC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALF,E,gEAQK,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,OACtCH,MAAK,SAAAK,GAAK,OAAIC,QAAQC,IAAIF,Q,+BAEnB,IAAD,SACwBG,KAAKX,MAA7BR,EADA,EACAA,SAASS,EADT,EACSA,YACVW,EAAmBpB,EAASqB,QACpC,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASd,EAAYa,kBAEzD,OACE,sBAAK9B,UAAU,MAAf,UAEE,mDACA,cAAC,EAAD,CAAWW,YAAY,kBACvBC,aAAc,SAAAoB,GAAC,OACb,EAAKT,SAAS,CAACN,YAAYe,EAAEC,OAAOC,WAGtC,cAAC,EAAD,CAAU1B,SAAYoB,W,GA7BVO,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.43fa2f13.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\nexport const Card = props => (\r\n<div className = 'card-container'>\r\n    <img alt='monsters' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n    <h2> {props.monster.name}  </h2>\r\n    <p>{props.monster.email}</p> \r\n</div>\r\n);\r\n","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.styles.css';\r\nexport const CardList = props => (\r\n<div className='card-list'> \r\n   {props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={monster} />\r\n    ))\r\n    }\r\n </div>\r\n);","import React from 'react' ;\r\n\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => (\r\n    <input className='search' type='search' placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n);","import React,{Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n  \n  this.state = {\n    monsters: [],\n    searchField: ''\n  };  \n}\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({monsters:users}))\n  .then(check => console.log(check));\n}\nrender() {\n  const {monsters,searchField} = this.state;\n  const filteredMonsters = monsters.filter(\nmonster => monster.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n  return (\n    <div className='App'>\n      \n      <h1> Monsters Rolodex</h1>\n      <SearchBox placeholder='Search Monsters' \n      handleChange={e => \n        this.setState({searchField:e.target.value})  \n    }\n    />\n      <CardList monsters = {filteredMonsters}/>\n    </div>\n  );}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}